// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WineManager.Contexts;

#nullable disable

namespace WineManager.Migrations
{
    [DbContext(typeof(WineManagerContext))]
    [Migration("20221205111123_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WineManager.Entities.Bottle", b =>
                {
                    b.Property<int>("BottleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BottleId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrawerId")
                        .HasColumnType("int");

                    b.Property<string>("DrawerPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndKeepingYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartKeepingYear")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Vintage")
                        .HasColumnType("int");

                    b.HasKey("BottleId");

                    b.HasIndex("DrawerId");

                    b.HasIndex("UserId");

                    b.ToTable("Bottles");
                });

            modelBuilder.Entity("WineManager.Entities.Cave", b =>
                {
                    b.Property<int>("CaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaveId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Temperature")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CaveId");

                    b.HasIndex("UserId");

                    b.ToTable("Caves");
                });

            modelBuilder.Entity("WineManager.Entities.Drawer", b =>
                {
                    b.Property<int>("DrawerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrawerId"));

                    b.Property<int?>("CaveId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxPosition")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DrawerId");

                    b.HasIndex("CaveId");

                    b.HasIndex("UserId");

                    b.ToTable("Drawers");
                });

            modelBuilder.Entity("WineManager.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WineManager.Entities.Bottle", b =>
                {
                    b.HasOne("WineManager.Entities.Drawer", "Drawer")
                        .WithMany("Bottles")
                        .HasForeignKey("DrawerId");

                    b.HasOne("WineManager.Entities.User", "User")
                        .WithMany("Bottles")
                        .HasForeignKey("UserId");

                    b.Navigation("Drawer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WineManager.Entities.Cave", b =>
                {
                    b.HasOne("WineManager.Entities.User", "User")
                        .WithMany("Caves")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WineManager.Entities.Drawer", b =>
                {
                    b.HasOne("WineManager.Entities.Cave", "Cave")
                        .WithMany("Drawers")
                        .HasForeignKey("CaveId");

                    b.HasOne("WineManager.Entities.User", "User")
                        .WithMany("Drawers")
                        .HasForeignKey("UserId");

                    b.Navigation("Cave");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WineManager.Entities.Cave", b =>
                {
                    b.Navigation("Drawers");
                });

            modelBuilder.Entity("WineManager.Entities.Drawer", b =>
                {
                    b.Navigation("Bottles");
                });

            modelBuilder.Entity("WineManager.Entities.User", b =>
                {
                    b.Navigation("Bottles");

                    b.Navigation("Caves");

                    b.Navigation("Drawers");
                });
#pragma warning restore 612, 618
        }
    }
}
